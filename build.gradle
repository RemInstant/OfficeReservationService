plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.4'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'org.reminstant'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(22)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    developmentOnly 'org.springframework.boot:spring-boot-docker-compose'

    runtimeOnly 'org.postgresql:postgresql'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    implementation 'com.fasterxml.jackson.core:jackson-core:2.19.0'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.19.0'

    implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

test {
    useJUnitPlatform()
}

tasks.register('cleanLibs', Delete) {
    def folder = file('build/libs')
    if (folder.exists()) {
//        println "Удаляем содержимое папки ${folder}"
        folder.deleteDir()
    }
}

bootBuildImage {
    imageName = 'reminstant:office-reservation-server'
}

tasks.register("buildServerImage") {
    doLast {
        exec {
            workingDir project.rootDir
            commandLine 'docker', 'build', '-t', 'reminstant:office-reservation-server', '.'
        }
    }
}

tasks.register('stopContainers') {
    doLast {
        exec {
            workingDir project.rootDir
            commandLine 'docker', 'compose', 'down'
        }
    }
}

tasks.register('runContainers') {
    dependsOn stopContainers, cleanLibs, bootJar, buildServerImage

    tasks.cleanLibs.mustRunAfter stopContainers
    tasks.bootJar.mustRunAfter cleanLibs
    tasks.buildServerImage.mustRunAfter bootJar

    doFirst {
        if (!file('docker-compose.yaml').exists()) {
            throw new GradleException("docker-compose.yml not found!")
        }
    }

    doLast {
        exec {
            workingDir project.rootDir
            commandLine 'docker', 'compose', 'up', '-d'
        }
    }
}